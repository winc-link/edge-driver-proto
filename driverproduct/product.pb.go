// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: driverproduct/product.proto

package driverproduct

import (
	drivercommon "github.com/winc-link/edge-driver-proto/drivercommon"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProductNodeType int32

const (
	ProductNodeType_UnKnow    ProductNodeType = 0 //未知类型
	ProductNodeType_Gateway   ProductNodeType = 1 //网关
	ProductNodeType_Device    ProductNodeType = 2 //直连设备
	ProductNodeType_SubDevice ProductNodeType = 3 //网关子设备
)

// Enum value maps for ProductNodeType.
var (
	ProductNodeType_name = map[int32]string{
		0: "UnKnow",
		1: "Gateway",
		2: "Device",
		3: "SubDevice",
	}
	ProductNodeType_value = map[string]int32{
		"UnKnow":    0,
		"Gateway":   1,
		"Device":    2,
		"SubDevice": 3,
	}
)

func (x ProductNodeType) Enum() *ProductNodeType {
	p := new(ProductNodeType)
	*p = x
	return p
}

func (x ProductNodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductNodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_driverproduct_product_proto_enumTypes[0].Descriptor()
}

func (ProductNodeType) Type() protoreflect.EnumType {
	return &file_driverproduct_product_proto_enumTypes[0]
}

func (x ProductNodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductNodeType.Descriptor instead.
func (ProductNodeType) EnumDescriptor() ([]byte, []int) {
	return file_driverproduct_product_proto_rawDescGZIP(), []int{0}
}

type ProductNetType int32

const (
	ProductNetType_Other    ProductNetType = 0
	ProductNetType_Cellular ProductNetType = 1
	ProductNetType_Wifi     ProductNetType = 2
	ProductNetType_Ethernet ProductNetType = 3
	ProductNetType_NB       ProductNetType = 4
)

// Enum value maps for ProductNetType.
var (
	ProductNetType_name = map[int32]string{
		0: "Other",
		1: "Cellular",
		2: "Wifi",
		3: "Ethernet",
		4: "NB",
	}
	ProductNetType_value = map[string]int32{
		"Other":    0,
		"Cellular": 1,
		"Wifi":     2,
		"Ethernet": 3,
		"NB":       4,
	}
)

func (x ProductNetType) Enum() *ProductNetType {
	p := new(ProductNetType)
	*p = x
	return p
}

func (x ProductNetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductNetType) Descriptor() protoreflect.EnumDescriptor {
	return file_driverproduct_product_proto_enumTypes[1].Descriptor()
}

func (ProductNetType) Type() protoreflect.EnumType {
	return &file_driverproduct_product_proto_enumTypes[1]
}

func (x ProductNetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductNetType.Descriptor instead.
func (ProductNetType) EnumDescriptor() ([]byte, []int) {
	return file_driverproduct_product_proto_rawDescGZIP(), []int{1}
}

type ProtocolType int32

const (
	ProtocolType_MQTT               ProtocolType = 0
	ProtocolType_TCP                ProtocolType = 1
	ProtocolType_UDP                ProtocolType = 2
	ProtocolType_CoAP               ProtocolType = 3
	ProtocolType_HTTP               ProtocolType = 4
	ProtocolType_WebSocket          ProtocolType = 5
	ProtocolType_ModbusTCP          ProtocolType = 6
	ProtocolType_GB28181            ProtocolType = 7
	ProtocolType_SiemensS7          ProtocolType = 8
	ProtocolType_IEC104             ProtocolType = 9
	ProtocolType_UnknowProtocolType ProtocolType = 99
)

// Enum value maps for ProtocolType.
var (
	ProtocolType_name = map[int32]string{
		0:  "MQTT",
		1:  "TCP",
		2:  "UDP",
		3:  "CoAP",
		4:  "HTTP",
		5:  "WebSocket",
		6:  "ModbusTCP",
		7:  "GB28181",
		8:  "SiemensS7",
		9:  "IEC104",
		99: "UnknowProtocolType",
	}
	ProtocolType_value = map[string]int32{
		"MQTT":               0,
		"TCP":                1,
		"UDP":                2,
		"CoAP":               3,
		"HTTP":               4,
		"WebSocket":          5,
		"ModbusTCP":          6,
		"GB28181":            7,
		"SiemensS7":          8,
		"IEC104":             9,
		"UnknowProtocolType": 99,
	}
)

func (x ProtocolType) Enum() *ProtocolType {
	p := new(ProtocolType)
	*p = x
	return p
}

func (x ProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_driverproduct_product_proto_enumTypes[2].Descriptor()
}

func (ProtocolType) Type() protoreflect.EnumType {
	return &file_driverproduct_product_proto_enumTypes[2]
}

func (x ProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolType.Descriptor instead.
func (ProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_driverproduct_product_proto_rawDescGZIP(), []int{2}
}

type DataType int32

const (
	DataType_INT    DataType = 0
	DataType_FLOAT  DataType = 1
	DataType_TEXT   DataType = 2
	DataType_DATE   DataType = 3
	DataType_BOOL   DataType = 4
	DataType_ENUM   DataType = 5
	DataType_STRUCT DataType = 6
	DataType_ARRAY  DataType = 7
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0: "INT",
		1: "FLOAT",
		2: "TEXT",
		3: "DATE",
		4: "BOOL",
		5: "ENUM",
		6: "STRUCT",
		7: "ARRAY",
	}
	DataType_value = map[string]int32{
		"INT":    0,
		"FLOAT":  1,
		"TEXT":   2,
		"DATE":   3,
		"BOOL":   4,
		"ENUM":   5,
		"STRUCT": 6,
		"ARRAY":  7,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_driverproduct_product_proto_enumTypes[3].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_driverproduct_product_proto_enumTypes[3]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_driverproduct_product_proto_rawDescGZIP(), []int{3}
}

type QueryProductListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *drivercommon.BaseRequestMessage `protobuf:"bytes,1,opt,name=baseRequest,proto3" json:"baseRequest,omitempty"`
}

func (x *QueryProductListRequest) Reset() {
	*x = QueryProductListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverproduct_product_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductListRequest) ProtoMessage() {}

func (x *QueryProductListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_driverproduct_product_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductListRequest.ProtoReflect.Descriptor instead.
func (*QueryProductListRequest) Descriptor() ([]byte, []int) {
	return file_driverproduct_product_proto_rawDescGZIP(), []int{0}
}

func (x *QueryProductListRequest) GetBaseRequest() *drivercommon.BaseRequestMessage {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

type QueryProductListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *drivercommon.CommonResponse   `protobuf:"bytes,1,opt,name=baseResponse,proto3" json:"baseResponse,omitempty"`
	Data         *QueryProductListResponse_Data `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryProductListResponse) Reset() {
	*x = QueryProductListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverproduct_product_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductListResponse) ProtoMessage() {}

func (x *QueryProductListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_driverproduct_product_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductListResponse.ProtoReflect.Descriptor instead.
func (*QueryProductListResponse) Descriptor() ([]byte, []int) {
	return file_driverproduct_product_proto_rawDescGZIP(), []int{1}
}

func (x *QueryProductListResponse) GetBaseResponse() *drivercommon.CommonResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *QueryProductListResponse) GetData() *QueryProductListResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryProductByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *drivercommon.BaseRequestMessage `protobuf:"bytes,1,opt,name=baseRequest,proto3" json:"baseRequest,omitempty"`
	Id          string                           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryProductByIdRequest) Reset() {
	*x = QueryProductByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverproduct_product_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductByIdRequest) ProtoMessage() {}

func (x *QueryProductByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_driverproduct_product_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductByIdRequest.ProtoReflect.Descriptor instead.
func (*QueryProductByIdRequest) Descriptor() ([]byte, []int) {
	return file_driverproduct_product_proto_rawDescGZIP(), []int{2}
}

func (x *QueryProductByIdRequest) GetBaseRequest() *drivercommon.BaseRequestMessage {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *QueryProductByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateAt    uint64                   `protobuf:"varint,1,opt,name=createAt,proto3" json:"createAt,omitempty"`
	Id          string                   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string                   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	NodeType    ProductNodeType          `protobuf:"varint,5,opt,name=NodeType,proto3,enum=driverproduct.ProductNodeType" json:"NodeType,omitempty"` //产品的节点类型
	DataFormat  string                   `protobuf:"bytes,6,opt,name=dataFormat,proto3" json:"dataFormat,omitempty"`                                 //上报数据的格式
	Platform    drivercommon.IotPlatform `protobuf:"varint,7,opt,name=Platform,proto3,enum=drivercommon.IotPlatform" json:"Platform,omitempty"`
	NetType     ProductNetType           `protobuf:"varint,8,opt,name=netType,proto3,enum=driverproduct.ProductNetType" json:"netType,omitempty"`  //联网方式
	Protocol    ProtocolType             `protobuf:"varint,13,opt,name=protocol,proto3,enum=driverproduct.ProtocolType" json:"protocol,omitempty"` //协议类型
	Properties  []*Properties            `protobuf:"bytes,9,rep,name=properties,proto3" json:"properties,omitempty"`                               //属性
	Events      []*Events                `protobuf:"bytes,10,rep,name=events,proto3" json:"events,omitempty"`                                      //事件
	Actions     []*Actions               `protobuf:"bytes,11,rep,name=actions,proto3" json:"actions,omitempty"`                                    //动作
	Key         string                   `protobuf:"bytes,12,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverproduct_product_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_driverproduct_product_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_driverproduct_product_proto_rawDescGZIP(), []int{3}
}

func (x *Product) GetCreateAt() uint64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *Product) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Product) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Product) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Product) GetNodeType() ProductNodeType {
	if x != nil {
		return x.NodeType
	}
	return ProductNodeType_UnKnow
}

func (x *Product) GetDataFormat() string {
	if x != nil {
		return x.DataFormat
	}
	return ""
}

func (x *Product) GetPlatform() drivercommon.IotPlatform {
	if x != nil {
		return x.Platform
	}
	return drivercommon.IotPlatform_LocalIot
}

func (x *Product) GetNetType() ProductNetType {
	if x != nil {
		return x.NetType
	}
	return ProductNetType_Other
}

func (x *Product) GetProtocol() ProtocolType {
	if x != nil {
		return x.Protocol
	}
	return ProtocolType_MQTT
}

func (x *Product) GetProperties() []*Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Product) GetEvents() []*Events {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Product) GetActions() []*Actions {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Product) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Properties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelName   string    `protobuf:"bytes,1,opt,name=modelName,proto3" json:"modelName,omitempty"`
	ProductId   string    `protobuf:"bytes,2,opt,name=productId,proto3" json:"productId,omitempty"`
	Name        string    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Code        string    `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Description string    `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Required    bool      `protobuf:"varint,9,opt,name=required,proto3" json:"required,omitempty"`
	AccessMode  string    `protobuf:"bytes,6,opt,name=accessMode,proto3" json:"accessMode,omitempty"`
	TypeSpec    *TypeSpec `protobuf:"bytes,7,opt,name=typeSpec,proto3" json:"typeSpec,omitempty"`
	Extend      string    `protobuf:"bytes,8,opt,name=extend,proto3" json:"extend,omitempty"`
	// string readFormula = 10;
	// string writeFormula = 11;
	// string registerAddr = 12;
	// string registerType = 13;
	External map[string]string `protobuf:"bytes,14,rep,name=External,proto3" json:"External,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Properties) Reset() {
	*x = Properties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverproduct_product_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Properties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Properties) ProtoMessage() {}

func (x *Properties) ProtoReflect() protoreflect.Message {
	mi := &file_driverproduct_product_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Properties.ProtoReflect.Descriptor instead.
func (*Properties) Descriptor() ([]byte, []int) {
	return file_driverproduct_product_proto_rawDescGZIP(), []int{4}
}

func (x *Properties) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *Properties) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *Properties) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Properties) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Properties) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Properties) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *Properties) GetAccessMode() string {
	if x != nil {
		return x.AccessMode
	}
	return ""
}

func (x *Properties) GetTypeSpec() *TypeSpec {
	if x != nil {
		return x.TypeSpec
	}
	return nil
}

func (x *Properties) GetExtend() string {
	if x != nil {
		return x.Extend
	}
	return ""
}

func (x *Properties) GetExternal() map[string]string {
	if x != nil {
		return x.External
	}
	return nil
}

type Events struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelName    string          `protobuf:"bytes,1,opt,name=ModelName,proto3" json:"ModelName,omitempty"`
	ProductId    string          `protobuf:"bytes,2,opt,name=productId,proto3" json:"productId,omitempty"`
	Name         string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Code         string          `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Required     bool            `protobuf:"varint,8,opt,name=required,proto3" json:"required,omitempty"`
	Type         string          `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	Description  string          `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	OutputParams []*OutputParams `protobuf:"bytes,6,rep,name=OutputParams,proto3" json:"OutputParams,omitempty"`
}

func (x *Events) Reset() {
	*x = Events{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverproduct_product_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Events) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Events) ProtoMessage() {}

func (x *Events) ProtoReflect() protoreflect.Message {
	mi := &file_driverproduct_product_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Events.ProtoReflect.Descriptor instead.
func (*Events) Descriptor() ([]byte, []int) {
	return file_driverproduct_product_proto_rawDescGZIP(), []int{5}
}

func (x *Events) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *Events) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *Events) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Events) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Events) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *Events) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Events) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Events) GetOutputParams() []*OutputParams {
	if x != nil {
		return x.OutputParams
	}
	return nil
}

type InputParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     string    `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name     string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TypeSpec *TypeSpec `protobuf:"bytes,3,opt,name=typeSpec,proto3" json:"typeSpec,omitempty"`
}

func (x *InputParams) Reset() {
	*x = InputParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverproduct_product_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputParams) ProtoMessage() {}

func (x *InputParams) ProtoReflect() protoreflect.Message {
	mi := &file_driverproduct_product_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputParams.ProtoReflect.Descriptor instead.
func (*InputParams) Descriptor() ([]byte, []int) {
	return file_driverproduct_product_proto_rawDescGZIP(), []int{6}
}

func (x *InputParams) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *InputParams) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InputParams) GetTypeSpec() *TypeSpec {
	if x != nil {
		return x.TypeSpec
	}
	return nil
}

type OutputParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     string    `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name     string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TypeSpec *TypeSpec `protobuf:"bytes,3,opt,name=typeSpec,proto3" json:"typeSpec,omitempty"`
}

func (x *OutputParams) Reset() {
	*x = OutputParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverproduct_product_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputParams) ProtoMessage() {}

func (x *OutputParams) ProtoReflect() protoreflect.Message {
	mi := &file_driverproduct_product_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputParams.ProtoReflect.Descriptor instead.
func (*OutputParams) Descriptor() ([]byte, []int) {
	return file_driverproduct_product_proto_rawDescGZIP(), []int{7}
}

func (x *OutputParams) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *OutputParams) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OutputParams) GetTypeSpec() *TypeSpec {
	if x != nil {
		return x.TypeSpec
	}
	return nil
}

type TypeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` //设备属性的数据类型
	Specs string `protobuf:"bytes,2,opt,name=specs,proto3" json:"specs,omitempty"`
}

func (x *TypeSpec) Reset() {
	*x = TypeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverproduct_product_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeSpec) ProtoMessage() {}

func (x *TypeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_driverproduct_product_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeSpec.ProtoReflect.Descriptor instead.
func (*TypeSpec) Descriptor() ([]byte, []int) {
	return file_driverproduct_product_proto_rawDescGZIP(), []int{8}
}

func (x *TypeSpec) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TypeSpec) GetSpecs() string {
	if x != nil {
		return x.Specs
	}
	return ""
}

type Actions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelName    string          `protobuf:"bytes,1,opt,name=ModelName,proto3" json:"ModelName,omitempty"`
	ProductId    string          `protobuf:"bytes,2,opt,name=productId,proto3" json:"productId,omitempty"`
	Name         string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Code         string          `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Required     bool            `protobuf:"varint,9,opt,name=required,proto3" json:"required,omitempty"`
	CallType     string          `protobuf:"bytes,10,opt,name=callType,proto3" json:"callType,omitempty"`
	Description  string          `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	InputParams  []*InputParams  `protobuf:"bytes,6,rep,name=InputParams,proto3" json:"InputParams,omitempty"`
	OutputParams []*OutputParams `protobuf:"bytes,7,rep,name=OutputParams,proto3" json:"OutputParams,omitempty"`
}

func (x *Actions) Reset() {
	*x = Actions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverproduct_product_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Actions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Actions) ProtoMessage() {}

func (x *Actions) ProtoReflect() protoreflect.Message {
	mi := &file_driverproduct_product_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Actions.ProtoReflect.Descriptor instead.
func (*Actions) Descriptor() ([]byte, []int) {
	return file_driverproduct_product_proto_rawDescGZIP(), []int{9}
}

func (x *Actions) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *Actions) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *Actions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Actions) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Actions) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *Actions) GetCallType() string {
	if x != nil {
		return x.CallType
	}
	return ""
}

func (x *Actions) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Actions) GetInputParams() []*InputParams {
	if x != nil {
		return x.InputParams
	}
	return nil
}

func (x *Actions) GetOutputParams() []*OutputParams {
	if x != nil {
		return x.OutputParams
	}
	return nil
}

type QueryProductByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *drivercommon.CommonResponse   `protobuf:"bytes,1,opt,name=baseResponse,proto3" json:"baseResponse,omitempty"`
	Data         *QueryProductByIdResponse_Data `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryProductByIdResponse) Reset() {
	*x = QueryProductByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverproduct_product_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductByIdResponse) ProtoMessage() {}

func (x *QueryProductByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_driverproduct_product_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductByIdResponse.ProtoReflect.Descriptor instead.
func (*QueryProductByIdResponse) Descriptor() ([]byte, []int) {
	return file_driverproduct_product_proto_rawDescGZIP(), []int{10}
}

func (x *QueryProductByIdResponse) GetBaseResponse() *drivercommon.CommonResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *QueryProductByIdResponse) GetData() *QueryProductByIdResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryProductListResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    uint32     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Products []*Product `protobuf:"bytes,2,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *QueryProductListResponse_Data) Reset() {
	*x = QueryProductListResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverproduct_product_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductListResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductListResponse_Data) ProtoMessage() {}

func (x *QueryProductListResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_driverproduct_product_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductListResponse_Data.ProtoReflect.Descriptor instead.
func (*QueryProductListResponse_Data) Descriptor() ([]byte, []int) {
	return file_driverproduct_product_proto_rawDescGZIP(), []int{1, 0}
}

func (x *QueryProductListResponse_Data) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryProductListResponse_Data) GetProducts() []*Product {
	if x != nil {
		return x.Products
	}
	return nil
}

type QueryProductByIdResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product *Product `protobuf:"bytes,1,opt,name=product,proto3" json:"product,omitempty"`
}

func (x *QueryProductByIdResponse_Data) Reset() {
	*x = QueryProductByIdResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driverproduct_product_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProductByIdResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProductByIdResponse_Data) ProtoMessage() {}

func (x *QueryProductByIdResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_driverproduct_product_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProductByIdResponse_Data.ProtoReflect.Descriptor instead.
func (*QueryProductByIdResponse_Data) Descriptor() ([]byte, []int) {
	return file_driverproduct_product_proto_rawDescGZIP(), []int{10, 0}
}

func (x *QueryProductByIdResponse_Data) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

var File_driverproduct_product_proto protoreflect.FileDescriptor

var file_driverproduct_product_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x1a, 0x19, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5d, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf0, 0x01, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x50, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x17, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9e, 0x04, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x37, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x9d, 0x03, 0x0a, 0x0a, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x43, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x3b, 0x0a, 0x0d,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xff, 0x01, 0x0a, 0x06, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x6a, 0x0a, 0x0b, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x22, 0x6b, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x22, 0x34, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x22, 0xc6, 0x02, 0x0a, 0x07, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x38, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2a, 0x45,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x10, 0x03, 0x2a, 0x49, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x57, 0x69, 0x66, 0x69, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x42, 0x10, 0x04,
	0x2a, 0x9c, 0x01, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54,
	0x43, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x43, 0x6f, 0x41, 0x50, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x65, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x05,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x54, 0x43, 0x50, 0x10, 0x06, 0x12,
	0x0b, 0x0a, 0x07, 0x47, 0x42, 0x32, 0x38, 0x31, 0x38, 0x31, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x69, 0x65, 0x6d, 0x65, 0x6e, 0x73, 0x53, 0x37, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x49,
	0x45, 0x43, 0x31, 0x30, 0x34, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0x63, 0x2a,
	0x5d, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x49,
	0x4e, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x04, 0x12, 0x08, 0x0a,
	0x04, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x55, 0x43,
	0x54, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x07, 0x32, 0xda,
	0x01, 0x0a, 0x0a, 0x52, 0x70, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x65, 0x0a,
	0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x26, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x26, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x36, 0x5a, 0x34, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x69, 0x6e, 0x63, 0x2d, 0x6c,
	0x69, 0x6e, 0x6b, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_driverproduct_product_proto_rawDescOnce sync.Once
	file_driverproduct_product_proto_rawDescData = file_driverproduct_product_proto_rawDesc
)

func file_driverproduct_product_proto_rawDescGZIP() []byte {
	file_driverproduct_product_proto_rawDescOnce.Do(func() {
		file_driverproduct_product_proto_rawDescData = protoimpl.X.CompressGZIP(file_driverproduct_product_proto_rawDescData)
	})
	return file_driverproduct_product_proto_rawDescData
}

var file_driverproduct_product_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_driverproduct_product_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_driverproduct_product_proto_goTypes = []interface{}{
	(ProductNodeType)(0),                    // 0: driverproduct.ProductNodeType
	(ProductNetType)(0),                     // 1: driverproduct.ProductNetType
	(ProtocolType)(0),                       // 2: driverproduct.protocolType
	(DataType)(0),                           // 3: driverproduct.DataType
	(*QueryProductListRequest)(nil),         // 4: driverproduct.QueryProductListRequest
	(*QueryProductListResponse)(nil),        // 5: driverproduct.QueryProductListResponse
	(*QueryProductByIdRequest)(nil),         // 6: driverproduct.QueryProductByIdRequest
	(*Product)(nil),                         // 7: driverproduct.Product
	(*Properties)(nil),                      // 8: driverproduct.Properties
	(*Events)(nil),                          // 9: driverproduct.Events
	(*InputParams)(nil),                     // 10: driverproduct.InputParams
	(*OutputParams)(nil),                    // 11: driverproduct.OutputParams
	(*TypeSpec)(nil),                        // 12: driverproduct.TypeSpec
	(*Actions)(nil),                         // 13: driverproduct.Actions
	(*QueryProductByIdResponse)(nil),        // 14: driverproduct.QueryProductByIdResponse
	(*QueryProductListResponse_Data)(nil),   // 15: driverproduct.QueryProductListResponse.Data
	nil,                                     // 16: driverproduct.Properties.ExternalEntry
	(*QueryProductByIdResponse_Data)(nil),   // 17: driverproduct.QueryProductByIdResponse.Data
	(*drivercommon.BaseRequestMessage)(nil), // 18: drivercommon.BaseRequestMessage
	(*drivercommon.CommonResponse)(nil),     // 19: drivercommon.CommonResponse
	(drivercommon.IotPlatform)(0),           // 20: drivercommon.IotPlatform
}
var file_driverproduct_product_proto_depIdxs = []int32{
	18, // 0: driverproduct.QueryProductListRequest.baseRequest:type_name -> drivercommon.BaseRequestMessage
	19, // 1: driverproduct.QueryProductListResponse.baseResponse:type_name -> drivercommon.CommonResponse
	15, // 2: driverproduct.QueryProductListResponse.data:type_name -> driverproduct.QueryProductListResponse.Data
	18, // 3: driverproduct.QueryProductByIdRequest.baseRequest:type_name -> drivercommon.BaseRequestMessage
	0,  // 4: driverproduct.Product.NodeType:type_name -> driverproduct.ProductNodeType
	20, // 5: driverproduct.Product.Platform:type_name -> drivercommon.IotPlatform
	1,  // 6: driverproduct.Product.netType:type_name -> driverproduct.ProductNetType
	2,  // 7: driverproduct.Product.protocol:type_name -> driverproduct.protocolType
	8,  // 8: driverproduct.Product.properties:type_name -> driverproduct.Properties
	9,  // 9: driverproduct.Product.events:type_name -> driverproduct.Events
	13, // 10: driverproduct.Product.actions:type_name -> driverproduct.Actions
	12, // 11: driverproduct.Properties.typeSpec:type_name -> driverproduct.TypeSpec
	16, // 12: driverproduct.Properties.External:type_name -> driverproduct.Properties.ExternalEntry
	11, // 13: driverproduct.Events.OutputParams:type_name -> driverproduct.OutputParams
	12, // 14: driverproduct.InputParams.typeSpec:type_name -> driverproduct.TypeSpec
	12, // 15: driverproduct.OutputParams.typeSpec:type_name -> driverproduct.TypeSpec
	10, // 16: driverproduct.Actions.InputParams:type_name -> driverproduct.InputParams
	11, // 17: driverproduct.Actions.OutputParams:type_name -> driverproduct.OutputParams
	19, // 18: driverproduct.QueryProductByIdResponse.baseResponse:type_name -> drivercommon.CommonResponse
	17, // 19: driverproduct.QueryProductByIdResponse.data:type_name -> driverproduct.QueryProductByIdResponse.Data
	7,  // 20: driverproduct.QueryProductListResponse.Data.products:type_name -> driverproduct.Product
	7,  // 21: driverproduct.QueryProductByIdResponse.Data.product:type_name -> driverproduct.Product
	4,  // 22: driverproduct.RpcProduct.QueryProductList:input_type -> driverproduct.QueryProductListRequest
	6,  // 23: driverproduct.RpcProduct.QueryProductById:input_type -> driverproduct.QueryProductByIdRequest
	5,  // 24: driverproduct.RpcProduct.QueryProductList:output_type -> driverproduct.QueryProductListResponse
	14, // 25: driverproduct.RpcProduct.QueryProductById:output_type -> driverproduct.QueryProductByIdResponse
	24, // [24:26] is the sub-list for method output_type
	22, // [22:24] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_driverproduct_product_proto_init() }
func file_driverproduct_product_proto_init() {
	if File_driverproduct_product_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_driverproduct_product_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverproduct_product_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverproduct_product_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverproduct_product_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverproduct_product_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Properties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverproduct_product_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Events); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverproduct_product_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverproduct_product_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverproduct_product_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverproduct_product_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Actions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverproduct_product_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverproduct_product_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductListResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driverproduct_product_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProductByIdResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_driverproduct_product_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_driverproduct_product_proto_goTypes,
		DependencyIndexes: file_driverproduct_product_proto_depIdxs,
		EnumInfos:         file_driverproduct_product_proto_enumTypes,
		MessageInfos:      file_driverproduct_product_proto_msgTypes,
	}.Build()
	File_driverproduct_product_proto = out.File
	file_driverproduct_product_proto_rawDesc = nil
	file_driverproduct_product_proto_goTypes = nil
	file_driverproduct_product_proto_depIdxs = nil
}
